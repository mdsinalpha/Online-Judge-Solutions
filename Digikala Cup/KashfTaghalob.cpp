#include <bits/stdc++.h>
using namespace std;

const int an = 20;

string alphabet = "ACDEFGHIKLMNPQRSTVWY";
vector<string> my_data{
    "4  0 -2 -1 -2  0 -2 -1 -1 -1 -1 -2 -1 -1 -1  1  0  0 -3 -2",
    "0  9 -3 -4 -2 -3 -3 -1 -3 -1 -1 -3 -3 -3 -3 -1 -1 -1 -2 -2",
    "-2 -3  6  2 -3 -1 -1 -3 -1 -4 -3  1 -1  0 -2  0 -1 -3 -4 -3",
    "-1 -4  2  5 -3 -2  0 -3  1 -3 -2  0 -1  2  0  0 -1 -2 -3 -2",
    "-2 -2 -3 -3  6 -3 -1  0 -3  0  0 -3 -4 -3 -3 -2 -2 -1  1  3",
    "0 -3 -1 -2 -3  6 -2 -4 -2 -4 -3  0 -2 -2 -2  0 -2 -3 -2 -3",
    "-2 -3 -1  0 -1 -2  8 -3 -1 -3 -2  1 -2  0  0 -1 -2 -3 -2  2",
    "-1 -1 -3 -3  0 -4 -3  4 -3  2  1 -3 -3 -3 -3 -2 -1  3 -3 -1",
    "-1 -3 -1  1 -3 -2 -1 -3  5 -2 -1  0 -1  1  2  0 -1 -2 -3 -2",
    "-1 -1 -4 -3  0 -4 -3  2 -2  4  2 -3 -3 -2 -2 -2 -1  1 -2 -1",
    "-1 -1 -3 -2  0 -3 -2  1 -1  2  5 -2 -2  0 -1 -1 -1  1 -1 -1",
    "-2 -3  1  0 -3  0  1 -3  0 -3 -2  6 -2  0  0  1  0 -3 -4 -2",
    "-1 -3 -1 -1 -4 -2 -2 -3 -1 -3 -2 -2  7 -1 -2 -1 -1 -2 -4 -3",
    "-1 -3  0  2 -3 -2  0 -3  1 -2  0  0 -1  5  1  0 -1 -2 -2 -1",
    "-1 -3 -2  0 -3 -2  0 -3  2 -2 -1  0 -2  1  5 -1 -1 -3 -3 -2",
    "1 -1  0  0 -2  0 -1 -2  0 -2 -1  1 -1  0 -1  4  1 -2 -3 -2",
    "0 -1 -1 -1 -2 -2 -2 -1 -1 -1 -1  0 -1 -1 -1  1  5  0 -2 -2",
    "0 -1 -3 -2 -1 -3 -3  3 -2  1  1 -3 -2 -2 -3 -2  0  4 -3 -1",
    "-3 -2 -4 -3  1 -2 -2 -3 -3 -2 -1 -4 -4 -2 -3 -3 -2 -3 11  2",
    "-2 -2 -3 -2  3 -3  2 -1 -2 -1 -1 -2 -3 -1 -2 -2 -2 -1  2  7"
};

map<char, int> ind;
int mat[20][20], n, m, dp[1003][1003];

string s, t;

int main(){
    for(int i = 0; i < an; i++)
        ind[alphabet[i]] = i;
    for(int i = 0; i < an; i++){
        int ptr = 0;
        stringstream ss(my_data[i]);
        int cost;
        while(ss >> cost)
            mat[i][ptr++] = cost;
    }
    cin >> s >> t;
    n = s.size(), m = t.size();
    for(int i = n; i >= 0; i--)
        for(int j = m; j >= 0; j--){
            if(i == n && j == m)
                dp[i][j] = 0;
            else if(i == n)
                dp[i][j] = dp[i][j+1] - 5;
            else if(j == m)
                dp[i][j] = dp[i+1][j] - 5;
            else
                dp[i][j] = max(dp[i+1][j] - 5, max(dp[i][j+1] - 5, mat[ind[s[i]]][ind[t[j]]] + dp[i+1][j+1]));
        }
    cout << dp[0][0] << endl;
}