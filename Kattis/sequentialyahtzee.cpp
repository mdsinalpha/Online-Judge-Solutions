#include <bits/stdc++.h>
using namespace std;

// Sequential Yahtzee

int p10[7]{0, 1, 10, 100, 1000, 10000, 100000};
int x[7]; // x1 + x2 + x3 + x4 + x5 + x6 = 5
// vector<int> masks;

void track(int i, int s){
    if(i == 7){
        if(s)
            return;
        int ans = 0;
        for(int i = 1; i <= 6; i++)
            ans += x[i] * p10[i];
        // masks.push_back(ans);
        return;
    }
    for(int d = 0; d <= s; d++)
        x[i] = d, track(i+1, s-d);
}

vector<int> masks{500000, 410000, 320000, 230000, 140000, 50000, 401000, 311000, 221000, 131000, 41000, 302000, 212000, 122000, 32000, 203000, 113000, 23000, 104000, 14000, 5000, 400100, 310100, 220100, 130100, 40100, 301100, 211100, 121100, 
31100, 202100, 112100, 22100, 103100, 13100, 4100, 300200, 210200, 120200, 30200, 201200, 111200, 21200, 102200, 12200, 3200, 200300, 110300, 20300, 101300, 11300, 2300, 100400, 10400, 1400, 500, 400010, 310010, 220010, 130010, 40010, 301010, 211010, 121010, 31010, 202010, 112010, 22010, 103010, 13010, 4010, 300110, 210110, 120110, 30110, 201110, 111110, 21110, 102110, 12110, 3110, 200210, 110210, 20210, 101210, 11210, 2210, 100310, 10310, 1310, 410, 300020, 210020, 120020, 30020, 201020, 111020, 21020, 102020, 12020, 3020, 200120, 110120, 20120, 101120, 11120, 2120, 100220, 10220, 1220, 320, 200030, 110030, 20030, 101030, 11030, 2030, 100130, 10130, 1130, 230, 100040, 10040, 1040, 140, 50, 400001, 310001, 220001, 130001, 40001, 301001, 211001, 121001, 31001, 202001, 112001, 22001, 103001, 13001, 4001, 300101, 210101, 120101, 30101, 201101, 111101, 21101, 102101, 12101, 3101, 200201, 110201, 20201, 101201, 11201, 2201, 100301, 10301, 1301, 401, 300011, 210011, 120011, 30011, 201011, 111011, 21011, 102011, 12011, 3011, 200111, 110111, 20111, 101111, 11111, 2111, 100211, 10211, 1211, 311, 200021, 110021, 
20021, 101021, 11021, 2021, 100121, 10121, 1121, 221, 100031, 10031, 1031, 131, 41, 300002, 210002, 120002, 30002, 201002, 111002, 21002, 102002, 12002, 3002, 200102, 110102, 20102, 101102, 11102, 2102, 100202, 10202, 1202, 
302, 200012, 110012, 20012, 101012, 11012, 2012, 100112, 10112, 1112, 212, 100022, 10022, 1022, 122, 32, 200003, 110003, 20003, 101003, 11003, 2003, 100103, 10103, 1103, 203, 100013, 10013, 1013, 113, 23, 100004, 10004, 1004, 104, 14, 5};
int mindex[500003];

int cnt[7];

inline int score(int s, int i){
    for(int i = 1; i <= 6; i++)
        cnt[i] = s % 10, s /= 10;
    if(i < 6)
        return (i + 1) * cnt[i + 1];
    int sum = 0;
    for(int j = 1; j <= 6; j++)
        sum += j * cnt[j];
    if(i == 6){
        for(int j = 1; j <= 6; j++)
            if(cnt[j] >= 3)
                return sum;
        return 0;
    }
    if(i == 7){
        for(int j = 1; j <= 6; j++)
            if(cnt[j] >= 4)
                return sum;
        return 0;
    }
    if(i == 8){
        bool t1 = false, t2 = false;
        for(int j = 1; j <= 6; j++){
            if(cnt[j] == 3)
                t1 = true;
            if(cnt[j] == 2)
                t2 = true;
        }
        if(t1 && t2)
            return 25;
        return 0;
    }
    if(i == 9){
        for(int i = 1; i <= 3; i++){
            bool ok = true;
            for(int j = 0; j < 4; j++)
                if(!cnt[i + j]){
                    ok = false;
                    break;
                }
            if(ok)
                return 30;
        }
        return 0;
    }
    if(i == 10){
        for(int i = 1; i <= 2; i++){
            bool ok = true;
            for(int j = 0; j < 5; j++)
                if(!cnt[i + j]){
                    ok = false;
                    break;
                }
            if(ok)
                return 40;
        }
        return 0;
    }
    if(i == 12){
        for(int j = 1; j <= 6; j++)
            if(cnt[j] == 5)
                return 50;
        return 0;
    }
    return sum;
}

int n, masklen[32+3], a[195+3], dp[195+3][13+3][2+3][252+3];

int main(){
    // track(1, 5);
    // for(int i : masks)
        // cout << i << ", ";
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
        scanf("%d", a+i);
    for(int i = 0; i < masks.size(); i++)
        mindex[masks[i]] = i;
    for(int i = 1; i < 32; i++){
        int cp = i;
        while(cp){
            if(cp % 2)
                masklen[i]++;
            cp /= 2;
        }
    }
    for(int i = n-1; i >= 0; i--)
        for(int c = 0; c < 13; c++)
            for(int r = 0; r < 3; r++)
                if((!r && n - i >= 65 - 5 * c) || (r && n - i - 1 >= 60 - 5 * c))
                    for(int d = 0; d < (r ? 252 : 1); d++){
                        int ans = INT_MIN;
                        if(!r){
                            int die = 0;
                            for(int j = i; j < i + 5; j++)
                                die += p10[a[j]];
                            ans = max(ans, score(die, c) + dp[i+5][c+1][0][0]);
                            if(n - i - 6 >= 60 - 5 * c)
                                ans = max(ans, dp[i+5][c][1][mindex[die]]);
                        }
                        else{
                            int die = masks[d];
                            int dice[5], ptr = 0;
                            int cp = die;
                            for(int dig = 1; dig <= 6; dig++){
                                int times = cp % 10;
                                while(times--)
                                    dice[ptr++] = dig;
                                cp /= 10;
                            }
                            for(int tr = 1; tr < 32; tr++){
                                int s = masklen[tr];
                                int ndie = die;
                                if(n - i - s >= 60 - 5 * c){
                                    int ptr = i;
                                    for(int e = 0; e < 5; e++)
                                        if(tr & (1 << e))
                                            ndie -= p10[dice[e]], ndie += p10[a[ptr++]];
                                    ans = max(ans, score(ndie, c) + dp[i+s][c+1][0][0]);
                                }
                                if(r == 1 && n - i - s - 1 >= 60 - 5 * c)
                                    ans = max(ans, dp[i+s][c][2][mindex[ndie]]);
                            }
                        }
                        dp[i][c][r][d] = ans;
                    }
    printf("%d", dp[0][0][0][0]);
}